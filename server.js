const express = require('express');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Serve static files from the public directory
app.use(express.static(path.join(__dirname)));

// Serve the main HTML file
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// API endpoint for flipping text (optional - for future enhancements)
app.post('/api/flip', express.json(), (req, res) => {
    const { text } = req.body;
    
    if (!text || typeof text !== 'string') {
        return res.status(400).json({ error: 'Text is required and must be a string' });
    }
    
    // Character mapping for upside-down text (same as client-side)
    const flipMap = {
        'a': '…ê', 'b': 'q', 'c': '…î', 'd': 'p', 'e': '«ù', 'f': '…ü', 'g': '∆É', 'h': '…•',
        'i': '·¥â', 'j': '…æ', 'k': ' û', 'l': 'l', 'm': '…Ø', 'n': 'u', 'o': 'o', 'p': 'd',
        'q': 'b', 'r': '…π', 's': 's', 't': ' á', 'u': 'n', 'v': ' å', 'w': ' ç', 'x': 'x',
        'y': ' é', 'z': 'z',
        'A': '‚àÄ', 'B': '·ó∫', 'C': '∆Ü', 'D': '·ó°', 'E': '∆é', 'F': '‚Ñ≤', 'G': '◊§', 'H': 'H',
        'I': 'I', 'J': '≈ø', 'K': ' û', 'L': 'À•', 'M': 'W', 'N': 'N', 'O': 'O', 'P': '‘Ä',
        'Q': 'Q', 'R': '·¥ø', 'S': 'S', 'T': '‚î¥', 'U': '‚à©', 'V': 'Œõ', 'W': 'M', 'X': 'X',
        'Y': '‚ÖÑ', 'Z': 'Z',
        '0': '0', '1': '∆ñ', '2': '·ÑÖ', '3': '∆ê', '4': '„Ñ£', '5': 'œõ', '6': '9', '7': '„Ñ•',
        '8': '8', '9': '6',
        '!': '¬°', '?': '¬ø', '.': 'Àô', ',': '\'', ':': ':', ';': 'ÿõ', '(': ')', ')': '(',
        '[': ']', ']': '[', '{': '}', '}': '{', '<': '>', '>': '<', '"': '"', "'": "'",
        ' ': ' ', '\n': '\n', '\t': '\t'
    };
    
    const flippedText = text.split('').map(char => {
        return flipMap[char] || char;
    }).reverse().join('');
    
    res.json({ 
        original: text, 
        flipped: flippedText,
        timestamp: new Date().toISOString()
    });
});

// Health check endpoint for Railway
app.get('/health', (req, res) => {
    res.json({ 
        status: 'healthy', 
        timestamp: new Date().toISOString(),
        uptime: process.uptime()
    });
});

// 404 handler
app.use((req, res) => {
    res.status(404).sendFile(path.join(__dirname, 'index.html'));
});

// Error handler
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ 
        error: 'Something went wrong!',
        message: process.env.NODE_ENV === 'development' ? err.message : 'Internal server error'
    });
});

// Start the server
app.listen(PORT, () => {
    console.log(`üîÑ Flip Text App is running on port ${PORT}`);
    console.log(`üåê Open http://localhost:${PORT} to view the app`);
    console.log(`üìä Health check available at http://localhost:${PORT}/health`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('SIGTERM received, shutting down gracefully');
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('SIGINT received, shutting down gracefully');
    process.exit(0);
});
